import { Response, Router } from "express";
import { StatusCodes } from "http-status-codes";

const {{name}}Router = new Router();

{{#each endpoints as |endpoint|}}

import { {{#if handler.validation.class}}{{handler.validation.class}}{{else}}{{handler.validation.function}}{{/if}} } from './{{handler.validation.path}}';
import { {{#if handler.request.class}}{{handler.request.class}}{{else}}{{handler.request.function}}{{/if}} } from './{{handler.request.path}}';

{{#if param}}
export type {{endpoint.interfaceName}}RequestParams = {
  {{param}}: string;
}
{{/if}}

{{#if body}}
export interface {{endpoint.interfaceName}}RequestBody {
  {{#each body}}
  {{this.name}}: {{this.type}};
  {{/each}}
}
{{/if}}

export interface {{endpoint.interfaceName}}HandlerResponse {
  statusCode: StatusCodes;
  {{#each response}}
  {{this.name}}: {{this.type}};
  {{/each}}
}

export interface {{endpoint.interfaceName}}Request {
  {{#if param}}params: {{endpoint.interfaceName}}RequestParams; {{/if}}
  {{#if body}}body: {{endpoint.interfaceName}}RequestBody; {{/if}}
}

{{name}}Router.{{method}}("/{{eName}}{{#if param}}/:{{param}}{{/if}}", 
  async (
    req: {{endpoint.interfaceName}}Request, 
    res: Response
  ) => {
    {{#if param}}const params = req.params;{{/if}}
    {{#if body}}const body: {{endpoint.interfaceName}}RequestBody = req.body;{{/if}}
    {{#if handler.validation.class}}
    new {{handler.validation.class}}().{{handler.validation.function}}((params as {{endpoint.interfaceName}}RequestParams), body);
    {{else}}
    {{handler.validation.function}}.{{handler.validation.function}}((params as {{endpoint.interfaceName}}RequestParams), body);
    {{/if}}
    {{#if handler.request.class}}
    return new {{handler.request.class}}().{{handler.request.function}}((params as {{endpoint.interfaceName}}RequestParams), body);
    {{else}}
    return {{handler.request.function}}.{{handler.request.function}}((params as {{endpoint.interfaceName}}RequestParams), body);
    {{/if}}
});


{{/each}}