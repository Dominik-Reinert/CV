import { Response, Router } from 'express';
import { StatusCodes } from 'http-status-codes';

const {{name}}Router = new Router();

{{#each endpoints as |endpoint|}}

import { {{#if handler.validation.class}}{{handler.validation.class}}{{else}}{{handler.validation.function}}{{/if}} } from '../validator/{{handler.validation.path}}';
import { {{#if handler.request.class}}{{handler.request.class}}{{else}}{{handler.request.function}}{{/if}} } from '../handler/{{handler.request.path}}';

export type {{endpoint.interfaceName}}RequestParams = {
  {{#if param}}{{param}}: string;{{/if}}
}

export interface {{endpoint.interfaceName}}RequestBody {
  {{#each body}}
  {{this.name}}: {{this.type}};
  {{/each}}
}

export interface {{endpoint.interfaceName}}HandlerResponse {
  statusCode: StatusCodes;
  {{#each response}}
  {{this.name}}: {{this.type}};
  {{/each}}
}

export interface {{endpoint.interfaceName}}ValidationResult {
  statusCode: StatusCodes;
  jsonResponse?: {
    error: string;
  };
}

export interface {{endpoint.interfaceName}}Request {
  {{#if param}}params: {{endpoint.interfaceName}}RequestParams; {{/if}}
  {{#if body}}body: {{endpoint.interfaceName}}RequestBody; {{/if}}
}

{{../name}}Router.{{method}}("/{{eName}}{{#if param}}/:{{param}}{{/if}}", 
  async (
    req: {{endpoint.interfaceName}}Request, 
    res: Response
  ) => {
    const params: {{endpoint.interfaceName}}RequestParams{{#if param}} = req.params;{{/if}};
    const body: {{endpoint.interfaceName}}RequestBody{{#if body}} = req.body{{/if}};
    {{#if handler.validation}}
      {{#if handler.validation.class}}
      const validationResult = new {{handler.validation.class}}().{{handler.validation.function}}(params, body);
      {{else}}
      const validationResult = {{handler.validation.function}}(params, body);
      {{/if}}
    if (validationResult.statusCode !== StatusCodes.OK) {
      res.status(validationResult.statusCode).json(validationResult.jsonResponse);
    } else {
    {{/if}}
    {{#if handler.request.class}}
      const { statusCode, ...jsonResponse } = new {{handler.request.class}}().{{handler.request.function}}(params, body);
    {{else}}
      const { statusCode, ...jsonResponse } = {{handler.request.function}}(params, body);
    {{/if}}
      res.status(statusCode).json(jsonResponse);
    }
    return res;
});


{{/each}}